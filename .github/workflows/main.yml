name: "Build and Publish iOS"
on: workflow_dispatch

jobs:
  build_ipa:
    name: Build IPA
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Update package version
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'pubspec.yaml'
          propertyPath: 'version'
          value: 1.0.0+${{github.run_number}}
          commitChange: false

      - name: Install dependencies
        run: flutter pub get

      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
         name: release-ipa
         path: build/ios/ipa/*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  build_apk:
    name: Build APK
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17.x'

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Update package version
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'pubspec.yaml'
          propertyPath: 'version'
          value: 1.0.0+${{github.run_number}}
          commitChange: false

      - name: Install dependencies
        run: flutter pub get

      - name: Build android apk and appBundle
        run: flutter build apk

      - name: collect apk artifacts
        uses: actions/upload-artifact@v4
        with:
         name: release-apk
         path: build/app/outputs/flutter-apk/*.ipa
  
  releaseTestFlight:
    name: Release ipa to TestFlight
    needs: [ build_ipa ]
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Get release-ipa from artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-ipa

      - name: Upload artifaxt to TestFlight
        env:
          APPLE_ACCOUNT_ID: ${{ secrets.APPLE_ACCOUNT_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --upload-app -f thibolt.ipa -t ios --username $APPLE_ACCOUNT_ID --password $APPLE_APP_SPECIFIC_PASSWORD

  releaseIpaFirebase:
    name: Release ipa to Firebase
    needs: [ build_ipa ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Get release-ipa from artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-ipa

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_IOS_APP_ID}}
          serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
          file: thibolt.ipa
          groups: internal-testers

  releaseApkFirebase:
    name: Release apk to Firebase
    needs: [ build_apk ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Get release-apk from artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-apk

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_ANDROID_APP_ID}}
          serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
          file: app-release.apk
          groups: internal-testers
